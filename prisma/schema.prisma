generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  username              String         @unique
  email                 String         @unique
  passwordHash          String
  userAuthToken         String         @unique
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  role                  Roles          @relation(fields: [roleId], references: [id])
  roleId                Int
  status                UserStatus     @default(ACTIVE)
  assignedOrganizations Organization[] // Many-to-many relationship
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model Roles {
  id   Int    @id @map("_id")
  name String @unique
  User User[]
}

enum YesNo {
  yes
  no
}

model Organization {
  organizationId String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  address        String
  website        String
  contacts       Contacts[]
  assignedTo     User?           @relation(fields: [assignedToId], references: [id])
  assignedToId   String?         @db.ObjectId
  salesStage     SalesStage      @default(PROSPECT)
  priority       Priority        @default(MEDIUM)
  lastContactDate    DateTime?
  nextFollowUpDate   DateTime?
  lastActivityNote   String?
  lastActivityType   String?
  tags              String[] 
  leads          Leads[]
  qualification  Qualification[]
  presentation   Presentation[]
  POC            POC[]
  proposal       Proposal[]
  negotiation    Negotiation[]
  order          Order[]
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum SalesFunnelStage {
  PROSPECT
  LEAD
  QUALIFICATION
  PRESENTATION
  POC
  PROPOSAL
  NEGOTIATION
  ORDER
  CLOSED_WON
  CLOSED_LOST
}

model Contacts {
  id           String       @id @map("_id") @db.ObjectId
  name         String
  designation  String
  mobile       String
  department   String
  email        String
  organization Organization @relation(fields: [id], references: [organizationId])
}

enum SalesStage {
  PROSPECT
  LEAD
  QUALIFICATION
  PRESENTATION
  POC
  PROPOSAL
  NEGOTIATION
  ORDER
  CLOSED_WON
  CLOSED_LOST
}

model Leads {
  id                        String       @id @map("_id") @db.ObjectId
  vertical                  String
  totalLocations            Int
  businessExpectationsCount Float
  businessExpectationsValue Float
  businessExpectationsMRR   Float
  category                  String
  organization              Organization @relation(fields: [id], references: [organizationId])
}

model Qualification {
  id                    String           @id @map("_id") @db.ObjectId
  isQualified           YesNo
  customerPain          String
  authority             String
  consequence           String
  isTargetProfile       YesNo
  targetProfileReason   String?
  isTimingCorrect       YesNo
  timingReason         String?
  agreedForPresentation YesNo
  qualificationDate     DateTime
  stageEntryDate       DateTime         @default(now())
  status               QualificationStatus @default(IN_PROGRESS)
  dropReason           String?
  followups            QualificationFollowup[]
  organization         Organization     @relation(fields: [id], references: [organizationId])
}

enum QualificationStatus {
  IN_PROGRESS
  MOVED_TO_NEXT
  DROPPED
  HOLD
}

model QualificationFollowup {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  qualificationId String       @db.ObjectId
  remark          String
  followupDate    DateTime
  qualification   Qualification @relation(fields: [qualificationId], references: [id])
}

model Presentation {
  id                      String              @id @map("_id") @db.ObjectId
  presentationDate        DateTime?
  stageEntryDate       DateTime         @default(now())
  isQualified            YesNo
  decisionMakerInvolved  YesNo
  formalProposalRequested YesNo
  budgetApproved         YesNo
  caseClosureTimeFrame   String
  isPOC                  YesNo
  status                 PresentationStatus   @default(IN_PROGRESS)
  dropReason             String?
  followups              PresentationFollowup[]
  files                  PresentationFile[]
  organization           Organization        @relation(fields: [id], references: [organizationId])
}

enum PresentationStatus {
  IN_PROGRESS
  MOVED_TO_NEXT
  DROPPED
  HOLD
}

model PresentationFollowup {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  presentationId  String       @db.ObjectId
  remark          String
  followupDate    DateTime
  presentation    Presentation @relation(fields: [presentationId], references: [id])
}

model PresentationFile {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  presentationId  String       @db.ObjectId
  fileName        String
  fileUrl         String
  fileType        String
  uploadedAt      DateTime     @default(now())
  presentation    Presentation @relation(fields: [presentationId], references: [id])
}

model POC {
  id               String       @id @map("_id") @db.ObjectId
  stageEntryDate   DateTime    @default(now())  // When moved to this stage
  totalSites       Int
  productDetail    String
  POCDuration      String
  POCType          String
  businessSites    Int
  businessValue    Float
  MRR              Float
  hardwareSites    Int
  avgHardwareValue Float
  hardwareValue    Float
  POCStatus        POCStageStatus @default(IN_PROGRESS)
  dropReason       String?
  lossReason       String?
  followups        POCFollowup[]
  organization     Organization @relation(fields: [id], references: [organizationId])
}

enum POCStageStatus {
  IN_PROGRESS
  MOVED_TO_NEXT
  DROPPED
  HOLD
}

model POCFollowup {
  id          String   @id @map("_id") @db.ObjectId
  pocId       String   @db.ObjectId
  remark      String
  followupDate DateTime
  poc         POC      @relation(fields: [pocId], references: [id])
}

model Proposal {
  id               String          @id @map("_id") @db.ObjectId
  stageEntryDate   DateTime       @default(now())  // When moved to this stage
  submissionDate   DateTime
  value            Float
  status           ProposalStatus  @default(IN_PROGRESS)
  dropReason       String?
  lossReason       String?
  organization     Organization    @relation(fields: [id], references: [organizationId])
}

enum ProposalStatus {
  IN_PROGRESS
  MOVED_TO_NEXT
  DROPPED
  HOLD
}

model Negotiation {
  id               String              @id @map("_id") @db.ObjectId
  stageEntryDate   DateTime           @default(now())  // When moved to this stage
  status           NegotiationStatus   @default(IN_PROGRESS)
  dropReason       String?
  lossReason       String?
  followups        NegotiationFollowup[]
  organization     Organization        @relation(fields: [id], references: [organizationId])
}

enum NegotiationStatus {
  IN_PROGRESS
  MOVED_TO_NEXT
  DROPPED
  HOLD
}

model NegotiationFollowup {
  id             String      @id @map("_id") @db.ObjectId
  negotiationId  String      @db.ObjectId
  remark         String
  followupDate   DateTime
  negotiation    Negotiation @relation(fields: [negotiationId], references: [id])
}

model Order {
  id                 String       @id @map("_id") @db.ObjectId
  stageEntryDate     DateTime     @default(now())  // When moved to this stage
  projectStatus      String
  finalOrderValue    Float?
  finalBusinessValue String?
  totalHardwareSites Int?
  avgHardwareValue   Float?
  totalHardwareValue Float?
  lossReason         String?
  organization       Organization @relation(fields: [id], references: [organizationId])
}
